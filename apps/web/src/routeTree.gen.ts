/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StoreImport } from './routes/_store'
import { Route as SettingsImport } from './routes/_settings'
import { Route as DevconsoleImport } from './routes/_devconsole'
import { Route as IndexImport } from './routes/index'
import { Route as StoreIndexImport } from './routes/store/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as UUsernameImport } from './routes/u.$username_'
import { Route as OauthRedirectImport } from './routes/oauth/redirect'
import { Route as UUsernameIndexImport } from './routes/u.$username_/index'
import { Route as AdminDashboardIndexImport } from './routes/admin/dashboard/index'
import { Route as UUsernameWorkflowsImport } from './routes/u.$username_/workflows'
import { Route as UUsernameExtensionsImport } from './routes/u.$username_/extensions'
import { Route as StoreWorkflowsWorkflowIdImport } from './routes/store/workflows/$workflowId'
import { Route as DevconsoleWorkflowsNewImport } from './routes/devconsole/workflows/new'
import { Route as DevconsoleWorkflowsWorkflowIdImport } from './routes/devconsole/workflows/$workflowId'
import { Route as DevconsoleExtensionsNewImport } from './routes/devconsole/extensions/new'
import { Route as DevconsoleExtensionsExtensionIdImport } from './routes/devconsole/extensions/$extensionId'
import { Route as StoreStoreWorkflowsImport } from './routes/_store/store/workflows'
import { Route as StoreStoreExtensionsImport } from './routes/_store/store/extensions'
import { Route as SettingsSettingsProfileImport } from './routes/_settings/settings/profile'
import { Route as DevconsoleDevconsoleWorkflowsImport } from './routes/_devconsole/devconsole/workflows'
import { Route as DevconsoleDevconsoleExtensionsImport } from './routes/_devconsole/devconsole/extensions'
import { Route as StoreExtensionsExtensionNameExtensionIdImport } from './routes/store/extensions/$extensionName.$extensionId'

// Create/Update Routes

const StoreRoute = StoreImport.update({
  id: '/_store',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  id: '/_settings',
  getParentRoute: () => rootRoute,
} as any)

const DevconsoleRoute = DevconsoleImport.update({
  id: '/_devconsole',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const StoreIndexRoute = StoreIndexImport.update({
  path: '/store/',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const UUsernameRoute = UUsernameImport.update({
  path: '/u/$username',
  getParentRoute: () => rootRoute,
} as any)

const OauthRedirectRoute = OauthRedirectImport.update({
  path: '/oauth/redirect',
  getParentRoute: () => rootRoute,
} as any)

const UUsernameIndexRoute = UUsernameIndexImport.update({
  path: '/',
  getParentRoute: () => UUsernameRoute,
} as any)

const AdminDashboardIndexRoute = AdminDashboardIndexImport.update({
  path: '/admin/dashboard/',
  getParentRoute: () => rootRoute,
} as any)

const UUsernameWorkflowsRoute = UUsernameWorkflowsImport.update({
  path: '/workflows',
  getParentRoute: () => UUsernameRoute,
} as any)

const UUsernameExtensionsRoute = UUsernameExtensionsImport.update({
  path: '/extensions',
  getParentRoute: () => UUsernameRoute,
} as any)

const StoreWorkflowsWorkflowIdRoute = StoreWorkflowsWorkflowIdImport.update({
  path: '/store/workflows/$workflowId',
  getParentRoute: () => rootRoute,
} as any)

const DevconsoleWorkflowsNewRoute = DevconsoleWorkflowsNewImport.update({
  path: '/devconsole/workflows/new',
  getParentRoute: () => rootRoute,
} as any)

const DevconsoleWorkflowsWorkflowIdRoute =
  DevconsoleWorkflowsWorkflowIdImport.update({
    path: '/devconsole/workflows/$workflowId',
    getParentRoute: () => rootRoute,
  } as any)

const DevconsoleExtensionsNewRoute = DevconsoleExtensionsNewImport.update({
  path: '/devconsole/extensions/new',
  getParentRoute: () => rootRoute,
} as any)

const DevconsoleExtensionsExtensionIdRoute =
  DevconsoleExtensionsExtensionIdImport.update({
    path: '/devconsole/extensions/$extensionId',
    getParentRoute: () => rootRoute,
  } as any)

const StoreStoreWorkflowsRoute = StoreStoreWorkflowsImport.update({
  path: '/store/workflows',
  getParentRoute: () => StoreRoute,
} as any)

const StoreStoreExtensionsRoute = StoreStoreExtensionsImport.update({
  path: '/store/extensions',
  getParentRoute: () => StoreRoute,
} as any)

const SettingsSettingsProfileRoute = SettingsSettingsProfileImport.update({
  path: '/settings/profile',
  getParentRoute: () => SettingsRoute,
} as any)

const DevconsoleDevconsoleWorkflowsRoute =
  DevconsoleDevconsoleWorkflowsImport.update({
    path: '/devconsole/workflows',
    getParentRoute: () => DevconsoleRoute,
  } as any)

const DevconsoleDevconsoleExtensionsRoute =
  DevconsoleDevconsoleExtensionsImport.update({
    path: '/devconsole/extensions',
    getParentRoute: () => DevconsoleRoute,
  } as any)

const StoreExtensionsExtensionNameExtensionIdRoute =
  StoreExtensionsExtensionNameExtensionIdImport.update({
    path: '/store/extensions/$extensionName/$extensionId',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_devconsole': {
      id: '/_devconsole'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DevconsoleImport
      parentRoute: typeof rootRoute
    }
    '/_settings': {
      id: '/_settings'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/_store': {
      id: '/_store'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof StoreImport
      parentRoute: typeof rootRoute
    }
    '/oauth/redirect': {
      id: '/oauth/redirect'
      path: '/oauth/redirect'
      fullPath: '/oauth/redirect'
      preLoaderRoute: typeof OauthRedirectImport
      parentRoute: typeof rootRoute
    }
    '/u/$username': {
      id: '/u/$username'
      path: '/u/$username'
      fullPath: '/u/$username'
      preLoaderRoute: typeof UUsernameImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/store/': {
      id: '/store/'
      path: '/store'
      fullPath: '/store'
      preLoaderRoute: typeof StoreIndexImport
      parentRoute: typeof rootRoute
    }
    '/_devconsole/devconsole/extensions': {
      id: '/_devconsole/devconsole/extensions'
      path: '/devconsole/extensions'
      fullPath: '/devconsole/extensions'
      preLoaderRoute: typeof DevconsoleDevconsoleExtensionsImport
      parentRoute: typeof DevconsoleImport
    }
    '/_devconsole/devconsole/workflows': {
      id: '/_devconsole/devconsole/workflows'
      path: '/devconsole/workflows'
      fullPath: '/devconsole/workflows'
      preLoaderRoute: typeof DevconsoleDevconsoleWorkflowsImport
      parentRoute: typeof DevconsoleImport
    }
    '/_settings/settings/profile': {
      id: '/_settings/settings/profile'
      path: '/settings/profile'
      fullPath: '/settings/profile'
      preLoaderRoute: typeof SettingsSettingsProfileImport
      parentRoute: typeof SettingsImport
    }
    '/_store/store/extensions': {
      id: '/_store/store/extensions'
      path: '/store/extensions'
      fullPath: '/store/extensions'
      preLoaderRoute: typeof StoreStoreExtensionsImport
      parentRoute: typeof StoreImport
    }
    '/_store/store/workflows': {
      id: '/_store/store/workflows'
      path: '/store/workflows'
      fullPath: '/store/workflows'
      preLoaderRoute: typeof StoreStoreWorkflowsImport
      parentRoute: typeof StoreImport
    }
    '/devconsole/extensions/$extensionId': {
      id: '/devconsole/extensions/$extensionId'
      path: '/devconsole/extensions/$extensionId'
      fullPath: '/devconsole/extensions/$extensionId'
      preLoaderRoute: typeof DevconsoleExtensionsExtensionIdImport
      parentRoute: typeof rootRoute
    }
    '/devconsole/extensions/new': {
      id: '/devconsole/extensions/new'
      path: '/devconsole/extensions/new'
      fullPath: '/devconsole/extensions/new'
      preLoaderRoute: typeof DevconsoleExtensionsNewImport
      parentRoute: typeof rootRoute
    }
    '/devconsole/workflows/$workflowId': {
      id: '/devconsole/workflows/$workflowId'
      path: '/devconsole/workflows/$workflowId'
      fullPath: '/devconsole/workflows/$workflowId'
      preLoaderRoute: typeof DevconsoleWorkflowsWorkflowIdImport
      parentRoute: typeof rootRoute
    }
    '/devconsole/workflows/new': {
      id: '/devconsole/workflows/new'
      path: '/devconsole/workflows/new'
      fullPath: '/devconsole/workflows/new'
      preLoaderRoute: typeof DevconsoleWorkflowsNewImport
      parentRoute: typeof rootRoute
    }
    '/store/workflows/$workflowId': {
      id: '/store/workflows/$workflowId'
      path: '/store/workflows/$workflowId'
      fullPath: '/store/workflows/$workflowId'
      preLoaderRoute: typeof StoreWorkflowsWorkflowIdImport
      parentRoute: typeof rootRoute
    }
    '/u/$username/extensions': {
      id: '/u/$username/extensions'
      path: '/extensions'
      fullPath: '/u/$username/extensions'
      preLoaderRoute: typeof UUsernameExtensionsImport
      parentRoute: typeof UUsernameImport
    }
    '/u/$username/workflows': {
      id: '/u/$username/workflows'
      path: '/workflows'
      fullPath: '/u/$username/workflows'
      preLoaderRoute: typeof UUsernameWorkflowsImport
      parentRoute: typeof UUsernameImport
    }
    '/admin/dashboard/': {
      id: '/admin/dashboard/'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardIndexImport
      parentRoute: typeof rootRoute
    }
    '/u/$username/': {
      id: '/u/$username/'
      path: '/'
      fullPath: '/u/$username/'
      preLoaderRoute: typeof UUsernameIndexImport
      parentRoute: typeof UUsernameImport
    }
    '/store/extensions/$extensionName/$extensionId': {
      id: '/store/extensions/$extensionName/$extensionId'
      path: '/store/extensions/$extensionName/$extensionId'
      fullPath: '/store/extensions/$extensionName/$extensionId'
      preLoaderRoute: typeof StoreExtensionsExtensionNameExtensionIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  DevconsoleRoute: DevconsoleRoute.addChildren({
    DevconsoleDevconsoleExtensionsRoute,
    DevconsoleDevconsoleWorkflowsRoute,
  }),
  SettingsRoute: SettingsRoute.addChildren({ SettingsSettingsProfileRoute }),
  StoreRoute: StoreRoute.addChildren({
    StoreStoreExtensionsRoute,
    StoreStoreWorkflowsRoute,
  }),
  OauthRedirectRoute,
  UUsernameRoute: UUsernameRoute.addChildren({
    UUsernameExtensionsRoute,
    UUsernameWorkflowsRoute,
    UUsernameIndexRoute,
  }),
  AuthIndexRoute,
  StoreIndexRoute,
  DevconsoleExtensionsExtensionIdRoute,
  DevconsoleExtensionsNewRoute,
  DevconsoleWorkflowsWorkflowIdRoute,
  DevconsoleWorkflowsNewRoute,
  StoreWorkflowsWorkflowIdRoute,
  AdminDashboardIndexRoute,
  StoreExtensionsExtensionNameExtensionIdRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_devconsole",
        "/_settings",
        "/_store",
        "/oauth/redirect",
        "/u/$username",
        "/auth/",
        "/store/",
        "/devconsole/extensions/$extensionId",
        "/devconsole/extensions/new",
        "/devconsole/workflows/$workflowId",
        "/devconsole/workflows/new",
        "/store/workflows/$workflowId",
        "/admin/dashboard/",
        "/store/extensions/$extensionName/$extensionId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_devconsole": {
      "filePath": "_devconsole.tsx",
      "children": [
        "/_devconsole/devconsole/extensions",
        "/_devconsole/devconsole/workflows"
      ]
    },
    "/_settings": {
      "filePath": "_settings.tsx",
      "children": [
        "/_settings/settings/profile"
      ]
    },
    "/_store": {
      "filePath": "_store.tsx",
      "children": [
        "/_store/store/extensions",
        "/_store/store/workflows"
      ]
    },
    "/oauth/redirect": {
      "filePath": "oauth/redirect.tsx"
    },
    "/u/$username": {
      "filePath": "u.$username_.tsx",
      "children": [
        "/u/$username/extensions",
        "/u/$username/workflows",
        "/u/$username/"
      ]
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/store/": {
      "filePath": "store/index.tsx"
    },
    "/_devconsole/devconsole/extensions": {
      "filePath": "_devconsole/devconsole/extensions.tsx",
      "parent": "/_devconsole"
    },
    "/_devconsole/devconsole/workflows": {
      "filePath": "_devconsole/devconsole/workflows.tsx",
      "parent": "/_devconsole"
    },
    "/_settings/settings/profile": {
      "filePath": "_settings/settings/profile.tsx",
      "parent": "/_settings"
    },
    "/_store/store/extensions": {
      "filePath": "_store/store/extensions.tsx",
      "parent": "/_store"
    },
    "/_store/store/workflows": {
      "filePath": "_store/store/workflows.tsx",
      "parent": "/_store"
    },
    "/devconsole/extensions/$extensionId": {
      "filePath": "devconsole/extensions/$extensionId.tsx"
    },
    "/devconsole/extensions/new": {
      "filePath": "devconsole/extensions/new.tsx"
    },
    "/devconsole/workflows/$workflowId": {
      "filePath": "devconsole/workflows/$workflowId.tsx"
    },
    "/devconsole/workflows/new": {
      "filePath": "devconsole/workflows/new.tsx"
    },
    "/store/workflows/$workflowId": {
      "filePath": "store/workflows/$workflowId.tsx"
    },
    "/u/$username/extensions": {
      "filePath": "u.$username_/extensions.tsx",
      "parent": "/u/$username"
    },
    "/u/$username/workflows": {
      "filePath": "u.$username_/workflows.tsx",
      "parent": "/u/$username"
    },
    "/admin/dashboard/": {
      "filePath": "admin/dashboard/index.tsx"
    },
    "/u/$username/": {
      "filePath": "u.$username_/index.tsx",
      "parent": "/u/$username"
    },
    "/store/extensions/$extensionName/$extensionId": {
      "filePath": "store/extensions/$extensionName.$extensionId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
