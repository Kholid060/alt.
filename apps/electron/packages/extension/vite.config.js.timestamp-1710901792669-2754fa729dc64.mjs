// .electron-vendors.cache.json
var chrome = '122';

// packages/extension/vite.config.js
import react from 'file:///E:/command/apps/electron/node_modules/@vitejs/plugin-react/dist/index.mjs';
import { join } from 'node:path';
var __vite_injected_original_dirname =
  'E:\\command\\apps\\electron\\packages\\extension';
var PACKAGE_ROOT = __vite_injected_original_dirname;
var PROJECT_ROOT = join(PACKAGE_ROOT, '../..');
var NODE_MODULE_PATH = join(PROJECT_ROOT, 'node_modules');
var REACT_MODULE_DIR = join(NODE_MODULE_PATH, 'react', 'cjs');
var REACT_DOM_MODULE_DIR = join(NODE_MODULE_PATH, 'react-dom', 'cjs');
var config = {
  mode: process.env.MODE,
  root: PACKAGE_ROOT,
  envDir: PROJECT_ROOT,
  resolve: {
    alias: {
      '#packages': join(PACKAGE_ROOT, '../'),
      '/@/': join(PACKAGE_ROOT, 'src') + '/',
      '#common': join(PACKAGE_ROOT, '../common'),
    },
  },
  define: {
    'process.env.NODE_ENV': `'${process.env.NODE_ENV}'`,
  },
  build: {
    sourcemap: false,
    target: `chrome${chrome}`,
    outDir: 'dist',
    assetsDir: '.',
    minify: process.env.MODE !== 'development',
    rollupOptions: {
      external: ['react', 'react/jsx-runtime', 'react-dom'],
      output: {
        entryFileNames: '[name].js',
        paths: {
          react: './react.js',
          'react-dom': './react-dom.js',
          'react/jsx-runtime': './react-runtime.js',
        },
      },
    },
    lib: {
      entry: {
        index: './src/main.tsx',
        react: join(REACT_MODULE_DIR, 'react.production.min.js'),
        'react.dev': join(REACT_MODULE_DIR, 'react.development.js'),
        'react-runtime.dev': join(
          REACT_MODULE_DIR,
          'react-jsx-dev-runtime.development',
        ),
        'react-runtime': join(
          REACT_MODULE_DIR,
          'react-jsx-runtime.production.min.js',
        ),
        'react-dom': join(REACT_DOM_MODULE_DIR, 'react-dom.production.min.js'),
        'react-dom.dev': join(REACT_DOM_MODULE_DIR, 'react-dom.development.js'),
      },
      formats: ['es'],
    },
    emptyOutDir: true,
  },
  optimizeDeps: {
    include: ['react/jsx-runtime'],
  },
  plugins: [react()],
};
var vite_config_default = config;
export { vite_config_default as default };
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLmVsZWN0cm9uLXZlbmRvcnMuY2FjaGUuanNvbiIsICJwYWNrYWdlcy9leHRlbnNpb24vdml0ZS5jb25maWcuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIntcImNocm9tZVwiOlwiMTIyXCIsXCJub2RlXCI6XCIyMFwifSIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRTpcXFxcY29tbWFuZFxcXFxhcHBzXFxcXGVsZWN0cm9uXFxcXHBhY2thZ2VzXFxcXGV4dGVuc2lvblwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiRTpcXFxcY29tbWFuZFxcXFxhcHBzXFxcXGVsZWN0cm9uXFxcXHBhY2thZ2VzXFxcXGV4dGVuc2lvblxcXFx2aXRlLmNvbmZpZy5qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vRTovY29tbWFuZC9hcHBzL2VsZWN0cm9uL3BhY2thZ2VzL2V4dGVuc2lvbi92aXRlLmNvbmZpZy5qc1wiOy8qIGVzbGludC1lbnYgbm9kZSAqL1xuXG5pbXBvcnQgeyBjaHJvbWUgfSBmcm9tICcuLi8uLi8uZWxlY3Ryb24tdmVuZG9ycy5jYWNoZS5qc29uJztcbmltcG9ydCByZWFjdCBmcm9tICdAdml0ZWpzL3BsdWdpbi1yZWFjdCc7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAnbm9kZTpwYXRoJztcblxuY29uc3QgUEFDS0FHRV9ST09UID0gX19kaXJuYW1lO1xuY29uc3QgUFJPSkVDVF9ST09UID0gam9pbihQQUNLQUdFX1JPT1QsICcuLi8uLicpO1xuXG5jb25zdCBOT0RFX01PRFVMRV9QQVRIID0gam9pbihQUk9KRUNUX1JPT1QsICdub2RlX21vZHVsZXMnKTtcbmNvbnN0IFJFQUNUX01PRFVMRV9ESVIgPSBqb2luKE5PREVfTU9EVUxFX1BBVEgsICdyZWFjdCcsICdjanMnKTtcbmNvbnN0IFJFQUNUX0RPTV9NT0RVTEVfRElSID0gam9pbihOT0RFX01PRFVMRV9QQVRILCAncmVhY3QtZG9tJywgJ2NqcycpO1xuXG4vKipcbiAqIEB0eXBlIHtpbXBvcnQoJ3ZpdGUnKS5Vc2VyQ29uZmlnfVxuICogQHNlZSBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xuICovXG5jb25zdCBjb25maWcgPSB7XG4gIG1vZGU6IHByb2Nlc3MuZW52Lk1PREUsXG4gIHJvb3Q6IFBBQ0tBR0VfUk9PVCxcbiAgZW52RGlyOiBQUk9KRUNUX1JPT1QsXG4gIHJlc29sdmU6IHtcbiAgICBhbGlhczoge1xuICAgICAgJyNwYWNrYWdlcyc6IGpvaW4oUEFDS0FHRV9ST09ULCAnLi4vJyksXG4gICAgICAnL0AvJzogam9pbihQQUNLQUdFX1JPT1QsICdzcmMnKSArICcvJyxcbiAgICAgICcjY29tbW9uJzogam9pbihQQUNLQUdFX1JPT1QsICcuLi9jb21tb24nKSxcbiAgICB9LFxuICB9LFxuICBkZWZpbmU6IHtcbiAgICAncHJvY2Vzcy5lbnYuTk9ERV9FTlYnOiBgJyR7cHJvY2Vzcy5lbnYuTk9ERV9FTlZ9J2AsXG4gIH0sXG4gIGJ1aWxkOiB7XG4gICAgc291cmNlbWFwOiBmYWxzZSxcbiAgICB0YXJnZXQ6IGBjaHJvbWUke2Nocm9tZX1gLFxuICAgIG91dERpcjogJ2Rpc3QnLFxuICAgIGFzc2V0c0RpcjogJy4nLFxuICAgIG1pbmlmeTogcHJvY2Vzcy5lbnYuTU9ERSAhPT0gJ2RldmVsb3BtZW50JyxcbiAgICByb2xsdXBPcHRpb25zOiB7XG4gICAgICBleHRlcm5hbDogWydyZWFjdCcsICdyZWFjdC9qc3gtcnVudGltZScsICdyZWFjdC1kb20nXSxcbiAgICAgIG91dHB1dDoge1xuICAgICAgICBlbnRyeUZpbGVOYW1lczogJ1tuYW1lXS5qcycsXG4gICAgICAgIHBhdGhzOiB7XG4gICAgICAgICAgcmVhY3Q6ICcuL3JlYWN0LmpzJyxcbiAgICAgICAgICAncmVhY3QtZG9tJzogJy4vcmVhY3QtZG9tLmpzJyxcbiAgICAgICAgICAncmVhY3QvanN4LXJ1bnRpbWUnOiAnLi9yZWFjdC1ydW50aW1lLmpzJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBsaWI6IHtcbiAgICAgIGVudHJ5OiB7XG4gICAgICAgIGluZGV4OiAnLi9zcmMvbWFpbi50c3gnLFxuICAgICAgICByZWFjdDogam9pbihSRUFDVF9NT0RVTEVfRElSLCAncmVhY3QucHJvZHVjdGlvbi5taW4uanMnKSxcbiAgICAgICAgJ3JlYWN0LmRldic6IGpvaW4oUkVBQ1RfTU9EVUxFX0RJUiwgJ3JlYWN0LmRldmVsb3BtZW50LmpzJyksXG4gICAgICAgICdyZWFjdC1ydW50aW1lLmRldic6IGpvaW4oXG4gICAgICAgICAgUkVBQ1RfTU9EVUxFX0RJUixcbiAgICAgICAgICAncmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50JyxcbiAgICAgICAgKSxcbiAgICAgICAgJ3JlYWN0LXJ1bnRpbWUnOiBqb2luKFxuICAgICAgICAgIFJFQUNUX01PRFVMRV9ESVIsXG4gICAgICAgICAgJ3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyxcbiAgICAgICAgKSxcbiAgICAgICAgJ3JlYWN0LWRvbSc6IGpvaW4oUkVBQ1RfRE9NX01PRFVMRV9ESVIsICdyZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKSxcbiAgICAgICAgJ3JlYWN0LWRvbS5kZXYnOiBqb2luKFJFQUNUX0RPTV9NT0RVTEVfRElSLCAncmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyksXG4gICAgICB9LFxuICAgICAgZm9ybWF0czogWydlcyddLFxuICAgIH0sXG4gICAgZW1wdHlPdXREaXI6IHRydWUsXG4gIH0sXG4gIG9wdGltaXplRGVwczoge1xuICAgIGluY2x1ZGU6IFsncmVhY3QvanN4LXJ1bnRpbWUnXSxcbiAgfSxcbiAgcGx1Z2luczogW3JlYWN0KCldLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29uZmlnO1xuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFDLGFBQVM7OztBQ0dWLE9BQU8sV0FBVztBQUNsQixTQUFTLFlBQVk7QUFKckIsSUFBTSxtQ0FBbUM7QUFNekMsSUFBTSxlQUFlO0FBQ3JCLElBQU0sZUFBZSxLQUFLLGNBQWMsT0FBTztBQUUvQyxJQUFNLG1CQUFtQixLQUFLLGNBQWMsY0FBYztBQUMxRCxJQUFNLG1CQUFtQixLQUFLLGtCQUFrQixTQUFTLEtBQUs7QUFDOUQsSUFBTSx1QkFBdUIsS0FBSyxrQkFBa0IsYUFBYSxLQUFLO0FBTXRFLElBQU0sU0FBUztBQUFBLEVBQ2IsTUFBTSxRQUFRLElBQUk7QUFBQSxFQUNsQixNQUFNO0FBQUEsRUFDTixRQUFRO0FBQUEsRUFDUixTQUFTO0FBQUEsSUFDUCxPQUFPO0FBQUEsTUFDTCxhQUFhLEtBQUssY0FBYyxLQUFLO0FBQUEsTUFDckMsT0FBTyxLQUFLLGNBQWMsS0FBSyxJQUFJO0FBQUEsTUFDbkMsV0FBVyxLQUFLLGNBQWMsV0FBVztBQUFBLElBQzNDO0FBQUEsRUFDRjtBQUFBLEVBQ0EsUUFBUTtBQUFBLElBQ04sd0JBQXdCLElBQUksUUFBUSxJQUFJLFFBQVE7QUFBQSxFQUNsRDtBQUFBLEVBQ0EsT0FBTztBQUFBLElBQ0wsV0FBVztBQUFBLElBQ1gsUUFBUSxTQUFTLE1BQU07QUFBQSxJQUN2QixRQUFRO0FBQUEsSUFDUixXQUFXO0FBQUEsSUFDWCxRQUFRLFFBQVEsSUFBSSxTQUFTO0FBQUEsSUFDN0IsZUFBZTtBQUFBLE1BQ2IsVUFBVSxDQUFDLFNBQVMscUJBQXFCLFdBQVc7QUFBQSxNQUNwRCxRQUFRO0FBQUEsUUFDTixnQkFBZ0I7QUFBQSxRQUNoQixPQUFPO0FBQUEsVUFDTCxPQUFPO0FBQUEsVUFDUCxhQUFhO0FBQUEsVUFDYixxQkFBcUI7QUFBQSxRQUN2QjtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsSUFDQSxLQUFLO0FBQUEsTUFDSCxPQUFPO0FBQUEsUUFDTCxPQUFPO0FBQUEsUUFDUCxPQUFPLEtBQUssa0JBQWtCLHlCQUF5QjtBQUFBLFFBQ3ZELGFBQWEsS0FBSyxrQkFBa0Isc0JBQXNCO0FBQUEsUUFDMUQscUJBQXFCO0FBQUEsVUFDbkI7QUFBQSxVQUNBO0FBQUEsUUFDRjtBQUFBLFFBQ0EsaUJBQWlCO0FBQUEsVUFDZjtBQUFBLFVBQ0E7QUFBQSxRQUNGO0FBQUEsUUFDQSxhQUFhLEtBQUssc0JBQXNCLDZCQUE2QjtBQUFBLFFBQ3JFLGlCQUFpQixLQUFLLHNCQUFzQiwwQkFBMEI7QUFBQSxNQUN4RTtBQUFBLE1BQ0EsU0FBUyxDQUFDLElBQUk7QUFBQSxJQUNoQjtBQUFBLElBQ0EsYUFBYTtBQUFBLEVBQ2Y7QUFBQSxFQUNBLGNBQWM7QUFBQSxJQUNaLFNBQVMsQ0FBQyxtQkFBbUI7QUFBQSxFQUMvQjtBQUFBLEVBQ0EsU0FBUyxDQUFDLE1BQU0sQ0FBQztBQUNuQjtBQUVBLElBQU8sc0JBQVE7IiwKICAibmFtZXMiOiBbXQp9Cg==
